[{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RaceWithMainThread.conditional2_bad(...)` writes to field `this.ff` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":130,"column":-1,"procedure":"codetoanalyze.java.racerd.RaceWithMainThread.conditional2_bad(boolean):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":130,"column_number":-1,"description":"access to `this.ff`"}],"key":"RaceWithMainThread.java|conditional2_bad|THREAD_SAFETY_VIOLATION","hash":"df1d795258795b53eac0b17e70140215","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGwAAAAEAAAAIwAAABegsAEAggD/kQlhL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9SYWNlV2l0aE1haW5UaHJlYWQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RaceWithMainThread.conditionalMainThreadWriteBad()` indirectly writes to field `this.mOnlyWrittenOnMain` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":219,"column":-1,"procedure":"codetoanalyze.java.racerd.RaceWithMainThread.conditionalMainThreadWriteBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":219,"column_number":-1,"description":"call to void RaceWithMainThread.conditionalMainThreadWrite2(boolean)"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":214,"column_number":-1,"description":"access to `this.mOnlyWrittenOnMain`"}],"key":"RaceWithMainThread.java|conditionalMainThreadWriteBad|THREAD_SAFETY_VIOLATION","hash":"38626dcca62a2572f42996bb025f880d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGwAAAAEAAAAIwAAABegsAEA1gD/kQlhL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9SYWNlV2l0aE1haW5UaHJlYWQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RaceWithMainThread.conditional_isMainThread_ElseBranch_Bad()` writes to field `this.ff` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":152,"column":-1,"procedure":"codetoanalyze.java.racerd.RaceWithMainThread.conditional_isMainThread_ElseBranch_Bad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":152,"column_number":-1,"description":"access to `this.ff`"}],"key":"RaceWithMainThread.java|conditional_isMainThread_ElseBranch_Bad|THREAD_SAFETY_VIOLATION","hash":"0e445f3d66838f163e3da8dd776206fd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGwAAAAEAAAAIwAAABegsAEAmAD/kQlhL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9SYWNlV2l0aE1haW5UaHJlYWQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RaceWithMainThread.conditional_isMainThread_Negation_Bad()` writes to field `this.ff` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":168,"column":-1,"procedure":"codetoanalyze.java.racerd.RaceWithMainThread.conditional_isMainThread_Negation_Bad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":168,"column_number":-1,"description":"access to `this.ff`"}],"key":"RaceWithMainThread.java|conditional_isMainThread_Negation_Bad|THREAD_SAFETY_VIOLATION","hash":"b2fa0d158577d98d5bd1c1304aee8592","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGwAAAAEAAAAIwAAABegsAEAqAD/kQlhL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9SYWNlV2l0aE1haW5UaHJlYWQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RaceWithMainThread.conditional_isUiThread_ElseBranch_Bad()` writes to field `this.ff` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":162,"column":-1,"procedure":"codetoanalyze.java.racerd.RaceWithMainThread.conditional_isUiThread_ElseBranch_Bad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":162,"column_number":-1,"description":"access to `this.ff`"}],"key":"RaceWithMainThread.java|conditional_isUiThread_ElseBranch_Bad|THREAD_SAFETY_VIOLATION","hash":"18f1360f721f6ba774d947233dcbddd0","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGwAAAAEAAAAIwAAABegsAEAogD/kQlhL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9SYWNlV2l0aE1haW5UaHJlYWQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RaceWithMainThread.confusedAssertBad(...)` writes to field `this.mFld` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":191,"column":-1,"procedure":"codetoanalyze.java.racerd.RaceWithMainThread.confusedAssertBad(boolean):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":191,"column_number":-1,"description":"access to `this.mFld`"}],"key":"RaceWithMainThread.java|confusedAssertBad|THREAD_SAFETY_VIOLATION","hash":"b7f6d933fc9b332dcd0465a9ee37db03","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGwAAAAEAAAAIwAAABegsAEAvwD/kQlhL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9SYWNlV2l0aE1haW5UaHJlYWQuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `RaceWithMainThread.readProtectedUnthreadedBad()` reads with synchronization from `this.f`. Potentially races with unsynchronized write in method `RaceWithMainThread.main_thread_indirect_OK()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":98,"column":-1,"procedure":"codetoanalyze.java.racerd.RaceWithMainThread.readProtectedUnthreadedBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":98,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":98,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":47,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":47,"column_number":-1,"description":"call to void RaceWithMainThread.main_thread_OK()"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":36,"column_number":-1,"description":"access to `this.f`"}],"key":"RaceWithMainThread.java|readProtectedUnthreadedBad|THREAD_SAFETY_VIOLATION","hash":"35650a2f92384b23520f480ab870d6d4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANQAAAAIAAAARgAAAC6gsABiAP+RCWEvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1JhY2VXaXRoTWFpblRocmVhZC5qYXZhoLBkAP+RCWEvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1JhY2VXaXRoTWFpblRocmVhZC5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `RaceWithMainThread.read_unprotected_unthreaded1_Bad()` reads without synchronization from `this.f1`. Potentially races with write in method `RaceWithMainThread.main_thread1_OK()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":64,"column":-1,"procedure":"codetoanalyze.java.racerd.RaceWithMainThread.read_unprotected_unthreaded1_Bad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":64,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":64,"column_number":-1,"description":"access to `this.f1`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":43,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":43,"column_number":-1,"description":"access to `this.f1`"}],"key":"RaceWithMainThread.java|read_unprotected_unthreaded1_Bad|THREAD_SAFETY_VIOLATION","hash":"44cb4445a5b7a2edbfbfdfea27f75f10","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANQAAAAIAAAARgAAAC6gsABAAP+RCWEvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1JhY2VXaXRoTWFpblRocmVhZC5qYXZhoLBrAP+RCWEvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1JhY2VXaXRoTWFpblRocmVhZC5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `RaceWithMainThread.read_unprotected_unthreaded_Bad()` reads without synchronization from `this.f`. Potentially races with write in method `RaceWithMainThread.main_thread_indirect_OK()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":59,"column":-1,"procedure":"codetoanalyze.java.racerd.RaceWithMainThread.read_unprotected_unthreaded_Bad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":59,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":59,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":47,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":47,"column_number":-1,"description":"call to void RaceWithMainThread.main_thread_OK()"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":36,"column_number":-1,"description":"access to `this.f`"}],"key":"RaceWithMainThread.java|read_unprotected_unthreaded_Bad|THREAD_SAFETY_VIOLATION","hash":"83bb88f383171013e251f1cf8f3bc20d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANMAAAAIAAAARgAAAC6gsHsA/5EJYS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvUmFjZVdpdGhNYWluVGhyZWFkLmphdmGgsGQA/5EJYS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvUmFjZVdpdGhNYWluVGhyZWFkLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `RaceWithMainThread.writeAfterConditionalMainThreadInCalleeBad()` writes to field `this.mSharedField` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":228,"column":-1,"procedure":"codetoanalyze.java.racerd.RaceWithMainThread.writeAfterConditionalMainThreadInCalleeBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/RaceWithMainThread.java","line_number":228,"column_number":-1,"description":"access to `this.mSharedField`"}],"key":"RaceWithMainThread.java|writeAfterConditionalMainThreadInCalleeBad|THREAD_SAFETY_VIOLATION","hash":"a53dd4d79ba2ccd8e7ce59e28b7adc15","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGwAAAAEAAAAIwAAABegsAEA5AD/kQlhL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9SYWNlV2l0aE1haW5UaHJlYWQuamF2YUA="}]
