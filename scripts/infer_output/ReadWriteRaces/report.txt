#0
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java:74: warning: Thread Safety Violation
  Read/Write race. Non-private method `ReadWriteRaces.callUnprotecteReadInCallee()` indirectly reads without synchronization from `this.field1`. Potentially races with write in method `ReadWriteRaces.syncWrite1()`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  72.   
  73.     public Object callUnprotecteReadInCallee() {
  74. >     return unprotectedReadInCallee();
  75.     }
  76.   

#1
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java:44: warning: Thread Safety Violation
  Read/Write race. Non-private method `ReadWriteRaces.m1()` reads without synchronization from `this.racy`. Potentially races with write in method `ReadWriteRaces.m3()`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  42.     void m1() { // A read where there are other writes
  43.       Integer local;
  44. >     local = racy;
  45.     }
  46.   

#2
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java:48: warning: Thread Safety Violation
  Unprotected write. Non-private method `ReadWriteRaces.m2()` writes to field `this.racy` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  46.   
  47.     public void m2() {
  48. >     racy = 88;
  49.     }
  50.   

#3
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java:52: warning: Thread Safety Violation
  Unprotected write. Non-private method `ReadWriteRaces.m3()` writes to field `this.racy` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  50.   
  51.     public void m3() {
  52. >     racy = 99;
  53.     }
  54.   

#4
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java:103: warning: Thread Safety Violation
  Read/Write race. Non-private method `ReadWriteRaces.readInCalleeOutsideSyncBad(...)` indirectly reads without synchronization from `this.c.x`. Potentially races with write in method `ReadWriteRaces.readInCalleeOutsideSyncBad(...)`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  101.   
  102.     public void readInCalleeOutsideSyncBad(int i) {
  103. >     if (c.get() > i) { // should report read/write race here
  104.         lock.lock();
  105.         c.set(i);

#5
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java:66: warning: Thread Safety Violation
  Read/Write race. Non-private method `ReadWriteRaces.unprotectedRead1()` reads without synchronization from `this.field1`. Potentially races with write in method `ReadWriteRaces.syncWrite1()`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  64.   
  65.     public Object unprotectedRead1() {
  66. >     return field1;
  67.     }
  68.   

#6
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java:84: warning: Thread Safety Violation
  Read/Write race. Non-private method `ReadWriteRaces.unprotectedRead2()` reads without synchronization from `this.field2`. Potentially races with write in method `ReadWriteRaces.syncWrite2()`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  82.   
  83.     public Object unprotectedRead2() {
  84. >     return field2;
  85.     }
  86.   

#7
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java:96: warning: Thread Safety Violation
  Read/Write race. Non-private method `ReadWriteRaces.unprotectedRead3()` reads without synchronization from `this.field3`. Potentially races with write in method `ReadWriteRaces.callSyncWrite3()`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  94.   
  95.     public Object unprotectedRead3() {
  96. >     return field3;
  97.     }
  98.   

Found 8 issues
                        Issue Type(ISSUED_TYPE_ID): #
  Thread Safety Violation(THREAD_SAFETY_VIOLATION): 8
