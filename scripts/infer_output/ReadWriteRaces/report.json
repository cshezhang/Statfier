[{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ReadWriteRaces.callUnprotecteReadInCallee()` indirectly reads without synchronization from `this.field1`. Potentially races with write in method `ReadWriteRaces.syncWrite1()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":74,"column":-1,"procedure":"codetoanalyze.java.racerd.ReadWriteRaces.callUnprotecteReadInCallee():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":74,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":74,"column_number":-1,"description":"call to Object ReadWriteRaces.unprotectedReadInCallee()"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":70,"column_number":-1,"description":"access to `this.field1`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":62,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":62,"column_number":-1,"description":"access to `this.field1`"}],"key":"ReadWriteRaces.java|callUnprotecteReadInCallee|THREAD_SAFETY_VIOLATION","hash":"a0fe7c248d31e00600167408fe533e27","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAMwAAAAIAAAARAAAACygsABGAP+RCV0vaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1JlYWRXcml0ZVJhY2VzLmphdmGgsH4A/5EJXS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvUmVhZFdyaXRlUmFjZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ReadWriteRaces.m1()` reads without synchronization from `this.racy`. Potentially races with write in method `ReadWriteRaces.m3()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":44,"column":-1,"procedure":"codetoanalyze.java.racerd.ReadWriteRaces.m1():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":44,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":44,"column_number":-1,"description":"access to `this.racy`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":52,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":52,"column_number":-1,"description":"access to `this.racy`"}],"key":"ReadWriteRaces.java|m1|THREAD_SAFETY_VIOLATION","hash":"b62a2c4ca5b19e361bc9e078c3d8f46c","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAMsAAAAIAAAARAAAACygsGwA/5EJXS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvUmVhZFdyaXRlUmFjZXMuamF2YaCwdAD/kQldL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9SZWFkV3JpdGVSYWNlcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ReadWriteRaces.m2()` writes to field `this.racy` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":48,"column":-1,"procedure":"codetoanalyze.java.racerd.ReadWriteRaces.m2():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":48,"column_number":-1,"description":"access to `this.racy`"}],"key":"ReadWriteRaces.java|m2|THREAD_SAFETY_VIOLATION","hash":"482e6d69d2da82b5becfbfc1c228a190","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGYAAAAEAAAAIgAAABagsHAA/5EJXS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvUmVhZFdyaXRlUmFjZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ReadWriteRaces.m3()` writes to field `this.racy` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":52,"column":-1,"procedure":"codetoanalyze.java.racerd.ReadWriteRaces.m3():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":52,"column_number":-1,"description":"access to `this.racy`"}],"key":"ReadWriteRaces.java|m3|THREAD_SAFETY_VIOLATION","hash":"ebf77f44859bc338dff23d7ed8ebedb2","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGYAAAAEAAAAIgAAABagsHQA/5EJXS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvUmVhZFdyaXRlUmFjZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ReadWriteRaces.readInCalleeOutsideSyncBad(...)` indirectly reads without synchronization from `this.c.x`. Potentially races with write in method `ReadWriteRaces.readInCalleeOutsideSyncBad(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":103,"column":-1,"procedure":"codetoanalyze.java.racerd.ReadWriteRaces.readInCalleeOutsideSyncBad(int):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":103,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":103,"column_number":-1,"description":"call to int C.get()"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":17,"column_number":-1,"description":"access to `this.c.x`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":105,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":105,"column_number":-1,"description":"call to void C.set(int)"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":21,"column_number":-1,"description":"access to `this.c.x`"}],"key":"ReadWriteRaces.java|readInCalleeOutsideSyncBad|THREAD_SAFETY_VIOLATION","hash":"ced942181aa9568dc29fb50e7c631dd7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAMsAAAAIAAAARAAAACygsFEA/5EJXS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvUmVhZFdyaXRlUmFjZXMuamF2YaCwVQD/kQldL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9SZWFkV3JpdGVSYWNlcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ReadWriteRaces.unprotectedRead1()` reads without synchronization from `this.field1`. Potentially races with write in method `ReadWriteRaces.syncWrite1()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":66,"column":-1,"procedure":"codetoanalyze.java.racerd.ReadWriteRaces.unprotectedRead1():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":66,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":66,"column_number":-1,"description":"access to `this.field1`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":62,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":62,"column_number":-1,"description":"access to `this.field1`"}],"key":"ReadWriteRaces.java|unprotectedRead1|THREAD_SAFETY_VIOLATION","hash":"a415de29d18962d7f5dd5266378227ff","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAMwAAAAIAAAARAAAACygsABCAP+RCV0vaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1JlYWRXcml0ZVJhY2VzLmphdmGgsH4A/5EJXS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvUmVhZFdyaXRlUmFjZXMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ReadWriteRaces.unprotectedRead2()` reads without synchronization from `this.field2`. Potentially races with write in method `ReadWriteRaces.syncWrite2()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":84,"column":-1,"procedure":"codetoanalyze.java.racerd.ReadWriteRaces.unprotectedRead2():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":84,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":84,"column_number":-1,"description":"access to `this.field2`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":79,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":79,"column_number":-1,"description":"access to `this.field2`"}],"key":"ReadWriteRaces.java|unprotectedRead2|THREAD_SAFETY_VIOLATION","hash":"c9929eb5a5414406938465335b7f2b20","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAM0AAAAIAAAARAAAACygsABUAP+RCV0vaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1JlYWRXcml0ZVJhY2VzLmphdmGgsABPAP+RCV0vaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1JlYWRXcml0ZVJhY2VzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ReadWriteRaces.unprotectedRead3()` reads without synchronization from `this.field3`. Potentially races with write in method `ReadWriteRaces.callSyncWrite3()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":96,"column":-1,"procedure":"codetoanalyze.java.racerd.ReadWriteRaces.unprotectedRead3():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":96,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":96,"column_number":-1,"description":"access to `this.field3`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":92,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":92,"column_number":-1,"description":"call to void ReadWriteRaces.syncWrite3()"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ReadWriteRaces.java","line_number":88,"column_number":-1,"description":"access to `this.field3`"}],"key":"ReadWriteRaces.java|unprotectedRead3|THREAD_SAFETY_VIOLATION","hash":"a19437db9940941b0ef46dc413fb0496","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAM0AAAAIAAAARAAAACygsABgAP+RCV0vaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1JlYWRXcml0ZVJhY2VzLmphdmGgsABYAP+RCV0vaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1JlYWRXcml0ZVJhY2VzLmphdmFA"}]
