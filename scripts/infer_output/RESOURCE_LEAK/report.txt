#0
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/doccase/RESOURCE_LEAK.java:28: error: Resource Leak
  resource of type `java.io.FileOutputStream` acquired to `fos` by call to `FileOutputStream(...)` at line 25 is not released after line 28.
**Note**: potential exception at line 26
  26.           fos.write(7);   //DOH! What if exception?
  27.           fos.close();
  28. >     }
  29.   // where an exception in fos.write will cause execution to skip past the close() statement.
  30.   

#1
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/doccase/RESOURCE_LEAK.java:62: error: Resource Leak
  resource of type `java.io.FileOutputStream` acquired to `fos` by call to `FileOutputStream(...)` at line 56 is not released after line 62.
**Note**: potential exception at line 59
  60.               if (fos != null) fos.close();
  61.           }
  62. >     }
  63.   // Here, if there is an exception in the call to fis.close() execution will skip past fos.close(); a leak.
  64.   

#2
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/doccase/RESOURCE_LEAK.java:78: error: Resource Leak
  resource of type `java.io.FileOutputStream` acquired to `fos` by call to `FileOutputStream(...)` at line 73 is not released after line 78.
**Note**: potential exception at line 74
  76.               try {
  77.                   if (fis != null) fis.close();
  78. >             } catch (Exception e) {
  79.               }
  80.               ;  // Exception swallowing

#3
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/doccase/RESOURCE_LEAK.java:86: error: Resource Leak
  resource of type `java.io.FileInputStream` acquired to `fis` by call to `FileInputStream(...)` at line 87 is not released after line 86.
**Note**: potential exception at line 88
  84.   
  85.       public static void foo6() throws IOException {
  86. >         try (
  87.                   FileInputStream fis = new FileInputStream(new File("whatever.txt"));
  88.                   FileOutputStream fos = new FileOutputStream(new File("everwhat.txt"))

#4
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/doccase/RESOURCE_LEAK.java:86: error: Resource Leak
  resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 88 is not released after line 86.
**Note**: potential exception at line 90
  84.   
  85.       public static void foo6() throws IOException {
  86. >         try (
  87.                   FileInputStream fis = new FileInputStream(new File("whatever.txt"));
  88.                   FileOutputStream fos = new FileOutputStream(new File("everwhat.txt"))

#5
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/doccase/RESOURCE_LEAK.java:95: error: Resource Leak
  resource of type `java.io.FileInputStream` acquired to `fis` by call to `FileInputStream(...)` at line 96 is not released after line 95.
**Note**: potential exception at line 97
  93.   
  94.       public static void foo() throws IOException {
  95. >         try (
  96.                   FileInputStream fis = new FileInputStream(new File("whatever.txt"));
  97.                   FileOutputStream fos = new FileOutputStream(new File("everwhat.txt"))

#6
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/doccase/RESOURCE_LEAK.java:95: error: Resource Leak
  resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 97 is not released after line 95.
**Note**: potential exception at line 99
  93.   
  94.       public static void foo() throws IOException {
  95. >         try (
  96.                   FileInputStream fis = new FileInputStream(new File("whatever.txt"));
  97.                   FileOutputStream fos = new FileOutputStream(new File("everwhat.txt"))

Found 7 issues
    Issue Type(ISSUED_TYPE_ID): #
  Resource Leak(RESOURCE_LEAK): 7
