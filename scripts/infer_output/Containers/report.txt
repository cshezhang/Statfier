#0
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:287: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.addToSimpleArrayMapBad(...)` mutates container `map` via call to `SimpleArrayMap.put(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  285.   
  286.     public void addToSimpleArrayMapBad(SimpleArrayMap<Integer, Integer> map) {
  287. >     map.put(1, 1);
  288.     }
  289.   

#1
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:277: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.addToSparseArrayBad(...)` mutates container `sparseArray` via call to `SparseArray.put(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  275.   
  276.     public void addToSparseArrayBad(SparseArray sparseArray) {
  277. >     sparseArray.put(0, new Object());
  278.     }
  279.   

#2
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:268: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.addToSparseArrayCompatBad(...)` mutates container `sparseArray` via call to `SparseArrayCompat.put(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  266.   
  267.     public void addToSparseArrayCompatBad(SparseArrayCompat sparseArray) {
  268. >     sparseArray.put(0, new Object());
  269.     }
  270.   

#3
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:329: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.addToUnsynchronizedListBad(...)` mutates container `this.mSomeList` via call to `List.add(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  327.   
  328.     void addToUnsynchronizedListBad(String value) {
  329. >     mSomeList.add(value);
  330.     }
  331.   

#4
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:175: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.containerWrapperUnownedWriteBad(...)` indirectly mutates container `this.mContainerWrapper.children` via call to `List.add(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  173.   
  174.     public void containerWrapperUnownedWriteBad(Object o) {
  175. >     mContainerWrapper.write(o);
  176.     }
  177.   

#5
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:335: warning: Thread Safety Violation
  Read/Write race. Non-private method `Containers.getListSizeBad()` reads without synchronization from container `this.mSomeOtherList` via call to `List.size()`. Potentially races with write in method `Containers.raceWithSizeBad(...)`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  333.   
  334.     int getListSizeBad() {
  335. >     return mSomeOtherList.size();
  336.     }
  337.   

#6
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:345: warning: Thread Safety Violation
  Read/Write race. Non-private method `Containers.getMapSizeBad()` reads without synchronization from container `this.mSomeMap` via call to `Map.size()`. Potentially races with write in method `Containers.raceWithMapSizeBad(...)`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  343.   
  344.     int getMapSizeBad() {
  345. >     return mSomeMap.size();
  346.     }
  347.   

#7
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:63: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.listAddAllBad(...)` mutates container `this.mList` via call to `List.addAll(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  61.   
  62.     void listAddAllBad(Collection<String> c) {
  63. >     mList.addAll(c);
  64.     }
  65.   

#8
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:55: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.listAddBad1(...)` mutates container `this.mList` via call to `List.add(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  53.     // lists
  54.     void listAddBad1(String s) {
  55. >     mList.add(s);
  56.     }
  57.   

#9
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:59: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.listAddBad2(...)` mutates container `this.mList` via call to `List.add(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  57.   
  58.     void listAddBad2(int index, String s) {
  59. >     mList.add(index, s);
  60.     }
  61.   

#10
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:67: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.listClearBad()` mutates container `this.mList` via call to `List.clear()` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  65.   
  66.     void listClearBad() {
  67. >     mList.clear();
  68.     }
  69.   

#11
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:106: warning: Thread Safety Violation
  Read/Write race. Non-private method `Containers.listReadBad(...)` reads without synchronization from container `this.mListSyncWrites` via call to `List.contains(...)`. Potentially races with write in method `Containers.listSyncAddBad(...)`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  104.   
  105.     boolean listReadBad(String s) {
  106. >     return mListSyncWrites.contains(s);
  107.     }
  108.   

#12
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:79: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.listRemoveAllBad(...)` mutates container `this.mList` via call to `List.removeAll(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  77.   
  78.     void listRemoveAllBad(Collection<String> c) {
  79. >     mList.removeAll(c);
  80.     }
  81.   

#13
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:71: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.listRemoveBad1(...)` mutates container `this.mList` via call to `List.remove(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  69.   
  70.     void listRemoveBad1(int index) {
  71. >     mList.remove(index);
  72.     }
  73.   

#14
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:75: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.listRemoveBad2(...)` mutates container `this.mList` via call to `List.remove(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  73.   
  74.     void listRemoveBad2(String s) {
  75. >     mList.remove(s);
  76.     }
  77.   

#15
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:83: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.listSetBad(...)` mutates container `this.mList` via call to `List.set(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  81.   
  82.     void listSetBad(int index, String s) {
  83. >     mList.set(index, s);
  84.     }
  85.   

#16
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:87: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.listSubclassWriteBad(...)` mutates container `list` via call to `ArrayList.remove(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  85.   
  86.     void listSubclassWriteBad(ArrayList<String> list, int index) {
  87. >     list.remove(index);
  88.     }
  89.   

#17
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:123: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.mapClearBad()` mutates container `this.mMap` via call to `Map.clear()` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  121.   
  122.     void mapClearBad() {
  123. >     mMap.clear();
  124.     }
  125.   

#18
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:127: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.mapPutAllBad(...)` mutates container `this.mMap` via call to `Map.putAll(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  125.   
  126.     void mapPutAllBad(Map<String, String> otherMap) {
  127. >     mMap.putAll(otherMap);
  128.     }
  129.   

#19
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:115: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.mapPutBad(...)` mutates container `this.mMap` via call to `Map.put(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  113.     // maps
  114.     void mapPutBad(String key, String value) {
  115. >     mMap.put(key, value);
  116.     }
  117.   

#20
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:119: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.mapRemoveBad(...)` mutates container `this.mMap` via call to `Map.remove(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  117.   
  118.     void mapRemoveBad(String key) {
  119. >     mMap.remove(key);
  120.     }
  121.   

#21
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:145: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.mapSubclassWriteBad(...)` mutates container `m` via call to `HashMap.remove(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  143.     // make sure we still warn on subtypes of Map
  144.     void mapSubclassWriteBad(HashMap<String, String> m, String key) {
  145. >     m.remove(key);
  146.     }
  147.   

#22
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:306: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.poolBad()` mutates container `this.simplePool` via call to `Pools$SimplePool.release(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  304.         a = simplePool.acquire();
  305.       }
  306. >     simplePool.release(a);
  307.     }
  308.   

#23
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:387: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.raceOnMacDoFinalBad()` mutates container `this.mac` via call to `Mac.doFinal()` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  385.   
  386.     byte[] raceOnMacDoFinalBad() {
  387. >     return mac.doFinal();
  388.     }
  389.   

#24
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:379: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.raceOnMacInitBad(...)` mutates container `this.mac` via call to `Mac.init(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  377.   
  378.     void raceOnMacInitBad(Key key) throws InvalidKeyException {
  379. >     mac.init(key);
  380.     }
  381.   

#25
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:383: warning: Thread Safety Violation
  Unprotected write. Non-private method `Containers.raceOnMacUpdateBad(...)` mutates container `this.mac` via call to `Mac.update(...)` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  381.   
  382.     void raceOnMacUpdateBad(byte[] bytes) {
  383. >     mac.update(bytes);
  384.     }
  385.   

#26
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java:292: warning: Thread Safety Violation
  Read/Write race. Non-private method `Containers.readSimpleArrayMap()` reads without synchronization from container `this.si_map` via call to `SimpleArrayMap.get(...)`. Potentially races with write in method `Containers.addToSimpleArrayMapOk()`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  290.     // this should be a read/write race with addToSimpleArrayMapOk
  291.     public int readSimpleArrayMap() {
  292. >     return si_map.get(1);
  293.     }
  294.   

Found 27 issues
                        Issue Type(ISSUED_TYPE_ID): #
  Thread Safety Violation(THREAD_SAFETY_VIOLATION): 27
