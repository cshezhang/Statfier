[{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.addToSimpleArrayMapBad(...)` mutates container `map` via call to `SimpleArrayMap.put(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":287,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.addToSimpleArrayMapBad(android.support.v4.util.SimpleArrayMap):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":287,"column_number":-1,"description":"Write to container `map` via call to `put`"}],"key":"Containers.java|addToSimpleArrayMapBad|THREAD_SAFETY_VIOLATION","hash":"3b9748dc2a7b4d16542f135368117407","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGQAAAAEAAAAIQAAABagsAEBHwD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.addToSparseArrayBad(...)` mutates container `sparseArray` via call to `SparseArray.put(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":277,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.addToSparseArrayBad(android.util.SparseArray):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":277,"column_number":-1,"description":"Write to container `sparseArray` via call to `put`"}],"key":"Containers.java|addToSparseArrayBad|THREAD_SAFETY_VIOLATION","hash":"5a4902fa59c5d5ed9e1c73fd0c2c1b70","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGQAAAAEAAAAIQAAABagsAEBFQD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.addToSparseArrayCompatBad(...)` mutates container `sparseArray` via call to `SparseArrayCompat.put(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":268,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.addToSparseArrayCompatBad(android.support.v4.util.SparseArrayCompat):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":268,"column_number":-1,"description":"Write to container `sparseArray` via call to `put`"}],"key":"Containers.java|addToSparseArrayCompatBad|THREAD_SAFETY_VIOLATION","hash":"8aec98565e97d262049de13dd040776d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGQAAAAEAAAAIQAAABagsAEBDAD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.addToUnsynchronizedListBad(...)` mutates container `this.mSomeList` via call to `List.add(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":329,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.addToUnsynchronizedListBad(java.lang.String):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":329,"column_number":-1,"description":"Write to container `this.mSomeList` via call to `add`"}],"key":"Containers.java|addToUnsynchronizedListBad|THREAD_SAFETY_VIOLATION","hash":"2b7b4792e3c225c219694a73b74725bd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGQAAAAEAAAAIQAAABagsAEBSQD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.containerWrapperUnownedWriteBad(...)` indirectly mutates container `this.mContainerWrapper.children` via call to `List.add(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":175,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.containerWrapperUnownedWriteBad(java.lang.Object):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":175,"column_number":-1,"description":"call to Object ContainerWrapper.write(Object)"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":38,"column_number":-1,"description":"call to Object ContainerWrapper._write(Object)"},{"level":2,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":42,"column_number":-1,"description":"Write to container `this.mContainerWrapper.children` via call to `add`"}],"key":"Containers.java|containerWrapperUnownedWriteBad|THREAD_SAFETY_VIOLATION","hash":"883dd54850d792c1b1e2059ebdebf640","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGIAAAAEAAAAIQAAABagsGoA/5EJWS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvQ29udGFpbmVycy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Containers.getListSizeBad()` reads without synchronization from container `this.mSomeOtherList` via call to `List.size()`. Potentially races with write in method `Containers.raceWithSizeBad(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":335,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.getListSizeBad():int","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":335,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":335,"column_number":-1,"description":"Read of container `this.mSomeOtherList` via call to `size`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":339,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":339,"column_number":-1,"description":"Write to container `this.mSomeOtherList` via call to `remove`"}],"key":"Containers.java|getListSizeBad|THREAD_SAFETY_VIOLATION","hash":"984f6a3495df6204c813cd01a9352c17","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAMcAAAAIAAAAQgAAACygsAEBTwD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmGgsAEBUwD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Containers.getMapSizeBad()` reads without synchronization from container `this.mSomeMap` via call to `Map.size()`. Potentially races with write in method `Containers.raceWithMapSizeBad(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":345,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.getMapSizeBad():int","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":345,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":345,"column_number":-1,"description":"Read of container `this.mSomeMap` via call to `size`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":349,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":349,"column_number":-1,"description":"Write to container `this.mSomeMap` via call to `remove`"}],"key":"Containers.java|getMapSizeBad|THREAD_SAFETY_VIOLATION","hash":"0e1331a417eedca50460fd25d6f36c09","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAMcAAAAIAAAAQgAAACygsAEBWQD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmGgsAEBXQD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.listAddAllBad(...)` mutates container `this.mList` via call to `List.addAll(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":63,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.listAddAllBad(java.util.Collection):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":63,"column_number":-1,"description":"Write to container `this.mList` via call to `addAll`"}],"key":"Containers.java|listAddAllBad|THREAD_SAFETY_VIOLATION","hash":"2b7e9df64a7726521927d6d89e0ac20f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGIAAAAEAAAAIQAAABagsH8A/5EJWS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvQ29udGFpbmVycy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.listAddBad1(...)` mutates container `this.mList` via call to `List.add(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":55,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.listAddBad1(java.lang.String):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":55,"column_number":-1,"description":"Write to container `this.mList` via call to `add`"}],"key":"Containers.java|listAddBad1|THREAD_SAFETY_VIOLATION","hash":"2202fedd1126cec637b10a3b72094ac1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGIAAAAEAAAAIQAAABagsHcA/5EJWS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvQ29udGFpbmVycy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.listAddBad2(...)` mutates container `this.mList` via call to `List.add(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":59,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.listAddBad2(int,java.lang.String):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":59,"column_number":-1,"description":"Write to container `this.mList` via call to `add`"}],"key":"Containers.java|listAddBad2|THREAD_SAFETY_VIOLATION","hash":"3bee6b980ecb2c19b7f00c6f81e0eef9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGIAAAAEAAAAIQAAABagsHsA/5EJWS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvQ29udGFpbmVycy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.listClearBad()` mutates container `this.mList` via call to `List.clear()` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":67,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.listClearBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":67,"column_number":-1,"description":"Write to container `this.mList` via call to `clear`"}],"key":"Containers.java|listClearBad|THREAD_SAFETY_VIOLATION","hash":"1a21a3bde1648dd007205117f4024373","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGMAAAAEAAAAIQAAABagsABDAP+RCVkvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0NvbnRhaW5lcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Containers.listReadBad(...)` reads without synchronization from container `this.mListSyncWrites` via call to `List.contains(...)`. Potentially races with write in method `Containers.listSyncAddBad(...)`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":106,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.listReadBad(java.lang.String):boolean","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":106,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":106,"column_number":-1,"description":"Read of container `this.mListSyncWrites` via call to `contains`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":102,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":102,"column_number":-1,"description":"Write to container `this.mListSyncWrites` via call to `add`"}],"key":"Containers.java|listReadBad|THREAD_SAFETY_VIOLATION","hash":"9648eb209631cc7d69de93a70a2a699f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAMUAAAAIAAAAQgAAACygsABqAP+RCVkvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0NvbnRhaW5lcnMuamF2YaCwAGYA/5EJWS9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvQ29udGFpbmVycy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.listRemoveAllBad(...)` mutates container `this.mList` via call to `List.removeAll(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":79,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.listRemoveAllBad(java.util.Collection):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":79,"column_number":-1,"description":"Write to container `this.mList` via call to `removeAll`"}],"key":"Containers.java|listRemoveAllBad|THREAD_SAFETY_VIOLATION","hash":"49206356bce22e5aaf50373dd07d6188","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGMAAAAEAAAAIQAAABagsABPAP+RCVkvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0NvbnRhaW5lcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.listRemoveBad1(...)` mutates container `this.mList` via call to `List.remove(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":71,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.listRemoveBad1(int):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":71,"column_number":-1,"description":"Write to container `this.mList` via call to `remove`"}],"key":"Containers.java|listRemoveBad1|THREAD_SAFETY_VIOLATION","hash":"00a45cbd9e05587a99135d64f9b686a6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGMAAAAEAAAAIQAAABagsABHAP+RCVkvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0NvbnRhaW5lcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.listRemoveBad2(...)` mutates container `this.mList` via call to `List.remove(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":75,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.listRemoveBad2(java.lang.String):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":75,"column_number":-1,"description":"Write to container `this.mList` via call to `remove`"}],"key":"Containers.java|listRemoveBad2|THREAD_SAFETY_VIOLATION","hash":"44081ea2e55246a7836ae7f1c793f493","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGMAAAAEAAAAIQAAABagsABLAP+RCVkvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0NvbnRhaW5lcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.listSetBad(...)` mutates container `this.mList` via call to `List.set(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":83,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.listSetBad(int,java.lang.String):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":83,"column_number":-1,"description":"Write to container `this.mList` via call to `set`"}],"key":"Containers.java|listSetBad|THREAD_SAFETY_VIOLATION","hash":"b35bff008e316f8517aaf93aecd7334f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGMAAAAEAAAAIQAAABagsABTAP+RCVkvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0NvbnRhaW5lcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.listSubclassWriteBad(...)` mutates container `list` via call to `ArrayList.remove(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":87,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.listSubclassWriteBad(java.util.ArrayList,int):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":87,"column_number":-1,"description":"Write to container `list` via call to `remove`"}],"key":"Containers.java|listSubclassWriteBad|THREAD_SAFETY_VIOLATION","hash":"fc0be11e95b4932d5022fcf4644564c6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGMAAAAEAAAAIQAAABagsABXAP+RCVkvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0NvbnRhaW5lcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.mapClearBad()` mutates container `this.mMap` via call to `Map.clear()` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":123,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.mapClearBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":123,"column_number":-1,"description":"Write to container `this.mMap` via call to `clear`"}],"key":"Containers.java|mapClearBad|THREAD_SAFETY_VIOLATION","hash":"e4dc97e21c272c0753cc3c07b5cc576d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGMAAAAEAAAAIQAAABagsAB7AP+RCVkvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0NvbnRhaW5lcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.mapPutAllBad(...)` mutates container `this.mMap` via call to `Map.putAll(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":127,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.mapPutAllBad(java.util.Map):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":127,"column_number":-1,"description":"Write to container `this.mMap` via call to `putAll`"}],"key":"Containers.java|mapPutAllBad|THREAD_SAFETY_VIOLATION","hash":"dfbf61d8d017a9e11e0eab5343807e4a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGMAAAAEAAAAIQAAABagsAB/AP+RCVkvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0NvbnRhaW5lcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.mapPutBad(...)` mutates container `this.mMap` via call to `Map.put(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":115,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.mapPutBad(java.lang.String,java.lang.String):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":115,"column_number":-1,"description":"Write to container `this.mMap` via call to `put`"}],"key":"Containers.java|mapPutBad|THREAD_SAFETY_VIOLATION","hash":"112c05d38380d41284d86176c45a1ca4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGMAAAAEAAAAIQAAABagsABzAP+RCVkvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0NvbnRhaW5lcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.mapRemoveBad(...)` mutates container `this.mMap` via call to `Map.remove(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":119,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.mapRemoveBad(java.lang.String):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":119,"column_number":-1,"description":"Write to container `this.mMap` via call to `remove`"}],"key":"Containers.java|mapRemoveBad|THREAD_SAFETY_VIOLATION","hash":"d5d3cae587d2ec90f97af4fda35f3878","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGMAAAAEAAAAIQAAABagsAB3AP+RCVkvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0NvbnRhaW5lcnMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.mapSubclassWriteBad(...)` mutates container `m` via call to `HashMap.remove(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":145,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.mapSubclassWriteBad(java.util.HashMap,java.lang.String):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":145,"column_number":-1,"description":"Write to container `m` via call to `remove`"}],"key":"Containers.java|mapSubclassWriteBad|THREAD_SAFETY_VIOLATION","hash":"3ea917b243f01b67de1e53dc1db0e408","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGQAAAAEAAAAIQAAABagsAEAkQD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.poolBad()` mutates container `this.simplePool` via call to `Pools$SimplePool.release(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":306,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.poolBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":306,"column_number":-1,"description":"Write to container `this.simplePool` via call to `release`"}],"key":"Containers.java|poolBad|THREAD_SAFETY_VIOLATION","hash":"ae49694e13e0b808569fd22b40a12cd9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGQAAAAEAAAAIQAAABagsAEBMgD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.raceOnMacDoFinalBad()` mutates container `this.mac` via call to `Mac.doFinal()` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":387,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.raceOnMacDoFinalBad():byte[]","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":387,"column_number":-1,"description":"Write to container `this.mac` via call to `doFinal`"}],"key":"Containers.java|raceOnMacDoFinalBad|THREAD_SAFETY_VIOLATION","hash":"3a7cdaa7f6d8e1e2ff54fa84c632ea6f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGQAAAAEAAAAIQAAABagsAEBgwD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.raceOnMacInitBad(...)` mutates container `this.mac` via call to `Mac.init(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":379,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.raceOnMacInitBad(java.security.Key):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":379,"column_number":-1,"description":"Write to container `this.mac` via call to `init`"}],"key":"Containers.java|raceOnMacInitBad|THREAD_SAFETY_VIOLATION","hash":"6b850a70e4db56289dab35582f7ae287","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGQAAAAEAAAAIQAAABagsAEBewD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Containers.raceOnMacUpdateBad(...)` mutates container `this.mac` via call to `Mac.update(...)` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":383,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.raceOnMacUpdateBad(byte[]):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":383,"column_number":-1,"description":"Write to container `this.mac` via call to `update`"}],"key":"Containers.java|raceOnMacUpdateBad|THREAD_SAFETY_VIOLATION","hash":"ba85c8307ceda2fb73b63a96bc486244","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGQAAAAEAAAAIQAAABagsAEBfwD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Containers.readSimpleArrayMap()` reads without synchronization from container `this.si_map` via call to `SimpleArrayMap.get(...)`. Potentially races with write in method `Containers.addToSimpleArrayMapOk()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":292,"column":-1,"procedure":"codetoanalyze.java.racerd.Containers.readSimpleArrayMap():int","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":292,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":292,"column_number":-1,"description":"Read of container `this.si_map` via call to `get`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":283,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Containers.java","line_number":283,"column_number":-1,"description":"Write to container `this.si_map` via call to `put`"}],"key":"Containers.java|readSimpleArrayMap|THREAD_SAFETY_VIOLATION","hash":"d0d53f72663d2a26cdc98c8449c27e99","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAMcAAAAIAAAAQgAAACygsAEBJAD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmGgsAEBGwD/kQlZL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Db250YWluZXJzLmphdmFA"}]
