#0
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Constructors.java:20: warning: Thread Safety Violation
  Unprotected write. Non-private method `Constructors()` writes to field `racerd.Constructors.staticField` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  18.   
  19.     public Constructors() {
  20. >     staticField = new Object(); // not ok;
  21.     }
  22.   

#1
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Constructors.java:28: warning: Thread Safety Violation
  Unprotected write. Non-private method `Constructors(...)` writes to field `o.field` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  26.   
  27.     public Constructors(Constructors o) {
  28. >     o.field = 42; // not ok
  29.     }
  30.   

#2
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Constructors.java:52: warning: Thread Safety Violation
  Read/Write race. Non-private method `Constructors.FP_singleton2Ok()` reads without synchronization from `racerd.Constructors.sSingleton1`. Potentially races with write in method `Constructors.FP_singleton2Ok()`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  50.         }
  51.       }
  52. >     return sSingleton1; // not currently smart enough to understand that this read is ok
  53.     }
  54.   

#3
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Constructors.java:57: warning: Thread Safety Violation
  Unprotected write. Non-private method `Constructors.singleton1Bad()` indirectly writes to field `racerd.Constructors.staticField` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  55.     public static Constructors singleton1Bad() {
  56.       // not ok because no lock is held
  57. >     return new Constructors(new Object());
  58.     }
  59.   

#4
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Constructors.java:63: warning: Thread Safety Violation
  Read/Write race. Non-private method `Constructors.singleton2Bad()` reads without synchronization from `racerd.Constructors.sSingleton2`. Potentially races with write in method `Constructors.singleton2Bad()`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  61.   
  62.     public static Constructors singleton2Bad() {
  63. >     if (sSingleton2 == null) {
  64.         sSingleton2 = new Constructors(0);
  65.       }

#5
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Constructors.java:64: warning: Thread Safety Violation
  Unprotected write. Non-private method `Constructors.singleton2Bad()` writes to field `racerd.Constructors.sSingleton2` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  62.     public static Constructors singleton2Bad() {
  63.       if (sSingleton2 == null) {
  64. >       sSingleton2 = new Constructors(0);
  65.       }
  66.       return sSingleton2;

Found 6 issues
                        Issue Type(ISSUED_TYPE_ID): #
  Thread Safety Violation(THREAD_SAFETY_VIOLATION): 6
