[{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ThreadSafeMethods.readSameFieldAsThreadSafeMethod1Bad()` reads without synchronization from `this.field1`. Potentially races with write in method `ThreadSafeMethods.safelyWriteSameFieldAsThreadSafeMethod1Ok()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":54,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethods.readSameFieldAsThreadSafeMethod1Bad():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":54,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":54,"column_number":-1,"description":"access to `this.field1`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":59,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":59,"column_number":-1,"description":"access to `this.field1`"}],"key":"ThreadSafeMethods.java|readSameFieldAsThreadSafeMethod1Bad|THREAD_SAFETY_VIOLATION","hash":"fac6d2cbd51b6995c369efb4765cbbe3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANEAAAAIAAAARgAAAC6gsHYA/5EJYC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvVGhyZWFkU2FmZU1ldGhvZHMuamF2YaCwewD/kQlgL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9UaHJlYWRTYWZlTWV0aG9kcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ThreadSafeMethods.readSameFieldAsThreadSafeMethod2Bad()` reads without synchronization from `this.field4`. Potentially races with write in method `ThreadSafeMethods.synchronizedWriteOk()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":78,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethods.readSameFieldAsThreadSafeMethod2Bad():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":78,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":78,"column_number":-1,"description":"access to `this.field4`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":68,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":68,"column_number":-1,"description":"access to `this.field4`"}],"key":"ThreadSafeMethods.java|readSameFieldAsThreadSafeMethod2Bad|THREAD_SAFETY_VIOLATION","hash":"412b69cfaf830caf606505e5b46fb539","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANMAAAAIAAAARgAAAC6gsABOAP+RCWAvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1RocmVhZFNhZmVNZXRob2RzLmphdmGgsABEAP+RCWAvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1RocmVhZFNhZmVNZXRob2RzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ThreadSafeMethods.readSameFieldAsThreadSafeMethodWhileSynchronized1Bad()` reads with synchronization from `this.field1`. Potentially races with unsynchronized write in method `ThreadSafeMethods.threadSafeMethodWriteBad()`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":63,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethods.readSameFieldAsThreadSafeMethodWhileSynchronized1Bad():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":63,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":63,"column_number":-1,"description":"access to `this.field1`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":23,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":23,"column_number":-1,"description":"access to `this.field1`"}],"key":"ThreadSafeMethods.java|readSameFieldAsThreadSafeMethodWhileSynchronized1Bad|THREAD_SAFETY_VIOLATION","hash":"448fd36ab9baeb71275cb2346bfd98a7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANEAAAAIAAAARgAAAC6gsH8A/5EJYC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvVGhyZWFkU2FmZU1ldGhvZHMuamF2YaCwVwD/kQlgL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9UaHJlYWRTYWZlTWV0aG9kcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ThreadSafeMethodsSubclass.readThreadSafeFieldOfOverrideBad()` reads without synchronization from `this.subclassField`. Potentially races with write in method `ThreadSafeMethodsSubclass.safeMethodOverride()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":123,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethodsSubclass.readThreadSafeFieldOfOverrideBad():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":123,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":123,"column_number":-1,"description":"access to `this.subclassField`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":107,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":107,"column_number":-1,"description":"access to `this.subclassField`"}],"key":"ThreadSafeMethods.java|readThreadSafeFieldOfOverrideBad|THREAD_SAFETY_VIOLATION","hash":"1f39b368acd4b3006dfa9853b9c7d01f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANMAAAAIAAAARgAAAC6gsAB7AP+RCWAvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1RocmVhZFNhZmVNZXRob2RzLmphdmGgsABrAP+RCWAvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1RocmVhZFNhZmVNZXRob2RzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeMethodsSubclass.safeMethodOverride()` writes to field `this.subclassField` outside of synchronization.\n Reporting because current method is annotated `@ThreadSafe` or overrides an annotated method., so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":107,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethodsSubclass.safeMethodOverride():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":107,"column_number":-1,"description":"access to `this.subclassField`"}],"key":"ThreadSafeMethods.java|safeMethodOverride|THREAD_SAFETY_VIOLATION","hash":"034452d58f4efc99832d32c4f36e4276","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGoAAAAEAAAAIwAAABegsABrAP+RCWAvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1RocmVhZFNhZmVNZXRob2RzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ThreadSafeMethods.threadSafeMethodReadBad()` reads without synchronization from `this.field2`. Potentially races with write in method `ThreadSafeMethods.threadSafePrivateMethodBad()`.\n Reporting because current method is annotated `@ThreadSafe` or overrides an annotated method., so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":28,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethods.threadSafeMethodReadBad():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":28,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":28,"column_number":-1,"description":"access to `this.field2`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":33,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":33,"column_number":-1,"description":"access to `this.field2`"}],"key":"ThreadSafeMethods.java|threadSafeMethodReadBad|THREAD_SAFETY_VIOLATION","hash":"8c2b8e132fea27a6055486bad23dc5dd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANEAAAAIAAAARgAAAC6gsFwA/5EJYC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvVGhyZWFkU2FmZU1ldGhvZHMuamF2YaCwYQD/kQlgL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9UaHJlYWRTYWZlTWV0aG9kcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeMethods.threadSafeMethodWriteBad()` writes to field `this.field1` outside of synchronization.\n Reporting because current method is annotated `@ThreadSafe` or overrides an annotated method., so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":23,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethods.threadSafeMethodWriteBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":23,"column_number":-1,"description":"access to `this.field1`"}],"key":"ThreadSafeMethods.java|threadSafeMethodWriteBad|THREAD_SAFETY_VIOLATION","hash":"a9834f481acee9b4c7429dc6c51d01be","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGkAAAAEAAAAIwAAABegsFcA/5EJYC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvVGhyZWFkU2FmZU1ldGhvZHMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeMethods.threadSafePrivateMethodBad()` writes to field `this.field2` outside of synchronization.\n Reporting because current method is annotated `@ThreadSafe` or overrides an annotated method., so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":33,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethods.threadSafePrivateMethodBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":33,"column_number":-1,"description":"access to `this.field2`"}],"key":"ThreadSafeMethods.java|threadSafePrivateMethodBad|THREAD_SAFETY_VIOLATION","hash":"17a8f90cb1c3c0f43b12d146edb80cbe","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGkAAAAEAAAAIwAAABegsGEA/5EJYC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvVGhyZWFkU2FmZU1ldGhvZHMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeMethods.threadSafeVisibleForTestingMethodBad()` writes to field `this.field3` outside of synchronization.\n Reporting because current method is annotated `@ThreadSafe` or overrides an annotated method., so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":39,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethods.threadSafeVisibleForTestingMethodBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":39,"column_number":-1,"description":"access to `this.field3`"}],"key":"ThreadSafeMethods.java|threadSafeVisibleForTestingMethodBad|THREAD_SAFETY_VIOLATION","hash":"b60c9078852a73440f0b35a8afcc6bfd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGkAAAAEAAAAIwAAABegsGcA/5EJYC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvVGhyZWFkU2FmZU1ldGhvZHMuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeMethods.writeSameFieldAsThreadSafeMethod1Bad()` writes to field `this.field1` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":49,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethods.writeSameFieldAsThreadSafeMethod1Bad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":49,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":49,"column_number":-1,"description":"access to `this.field1`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":59,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":59,"column_number":-1,"description":"access to `this.field1`"}],"key":"ThreadSafeMethods.java|writeSameFieldAsThreadSafeMethod1Bad|THREAD_SAFETY_VIOLATION","hash":"70c6a608a5e6a4142fb7e20bfd875179","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANEAAAAIAAAARgAAAC6gsHEA/5EJYC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvVGhyZWFkU2FmZU1ldGhvZHMuamF2YaCwewD/kQlgL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9UaHJlYWRTYWZlTWV0aG9kcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeMethods.writeSameFieldAsThreadSafeMethod2Bad()` writes to field `this.field4` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":73,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethods.writeSameFieldAsThreadSafeMethod2Bad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":73,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":73,"column_number":-1,"description":"access to `this.field4`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":68,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":68,"column_number":-1,"description":"access to `this.field4`"}],"key":"ThreadSafeMethods.java|writeSameFieldAsThreadSafeMethod2Bad|THREAD_SAFETY_VIOLATION","hash":"7a7e9676b5a46ea8a7e8aa210959bfad","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANMAAAAIAAAARgAAAC6gsABJAP+RCWAvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1RocmVhZFNhZmVNZXRob2RzLmphdmGgsABEAP+RCWAvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1RocmVhZFNhZmVNZXRob2RzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeMethodsSubclass.writeThreadSafeFieldOfOverrideBad()` writes to field `this.subclassField` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":119,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeMethodsSubclass.writeThreadSafeFieldOfOverrideBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":119,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":119,"column_number":-1,"description":"access to `this.subclassField`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":107,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeMethods.java","line_number":107,"column_number":-1,"description":"access to `this.subclassField`"}],"key":"ThreadSafeMethods.java|writeThreadSafeFieldOfOverrideBad|THREAD_SAFETY_VIOLATION","hash":"1209bfb1b93fd3f4ae51d21ceffb3ac5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANMAAAAIAAAARgAAAC6gsAB3AP+RCWAvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1RocmVhZFNhZmVNZXRob2RzLmphdmGgsABrAP+RCWAvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1RocmVhZFNhZmVNZXRob2RzLmphdmFA"}]
