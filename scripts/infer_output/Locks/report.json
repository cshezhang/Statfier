[{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Locks.afterReentrantLockUnlockBad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":45,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.afterReentrantLockUnlockBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":45,"column_number":-1,"description":"access to `this.f`"}],"key":"Locks.java|afterReentrantLockUnlockBad|THREAD_SAFETY_VIOLATION","hash":"ff91cfde0a39ce6ae4c6920f70a7249e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF0AAAAEAAAAIAAAABWgsG0A/5EJVC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvTG9ja3MuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Locks.afterUnlockBad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":39,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.afterUnlockBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":39,"column_number":-1,"description":"access to `this.f`"}],"key":"Locks.java|afterUnlockBad|THREAD_SAFETY_VIOLATION","hash":"c76dc080b136974a31a97c11c54252f6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF0AAAAEAAAAIAAAABWgsGcA/5EJVC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvTG9ja3MuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Locks.afterWriteLockUnlockBad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":51,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.afterWriteLockUnlockBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":51,"column_number":-1,"description":"access to `this.f`"}],"key":"Locks.java|afterWriteLockUnlockBad|THREAD_SAFETY_VIOLATION","hash":"80809752262028bb1bd7083fbd671c72","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF0AAAAEAAAAIAAAABWgsHMA/5EJVC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvTG9ja3MuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Locks.lockInLoopLexicalBad(...)` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":247,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.lockInLoopLexicalBad(int):void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":247,"column_number":-1,"description":"access to `this.f`"}],"key":"Locks.java|lockInLoopLexicalBad|THREAD_SAFETY_VIOLATION","hash":"3091d6642fef9b93c8211ad1c6b99cd5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAEAAAAIAAAABWgsAEA9wD/kQlUL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Mb2Nrcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Locks.negatedReentrantLockTryLockBad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":112,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.negatedReentrantLockTryLockBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":112,"column_number":-1,"description":"access to `this.f`"}],"key":"Locks.java|negatedReentrantLockTryLockBad|THREAD_SAFETY_VIOLATION","hash":"ecaa792313b4489bc53a3a1beb177d72","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF4AAAAEAAAAIAAAABWgsABwAP+RCVQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0xvY2tzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Locks.nested1Bad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":195,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.nested1Bad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":195,"column_number":-1,"description":"access to `this.f`"}],"key":"Locks.java|nested1Bad|THREAD_SAFETY_VIOLATION","hash":"cc5760a88efa0c4b76ee58ae3875d3e8","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAEAAAAIAAAABWgsAEAwwD/kQlUL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Mb2Nrcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Locks.nested2Bad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":201,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.nested2Bad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":201,"column_number":-1,"description":"access to `this.f`"}],"key":"Locks.java|nested2Bad|THREAD_SAFETY_VIOLATION","hash":"c03bc6280013344073e07132622ce01d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAEAAAAIAAAABWgsAEAyQD/kQlUL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Mb2Nrcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Locks.nested3Bad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":211,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.nested3Bad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":211,"column_number":-1,"description":"access to `this.f`"}],"key":"Locks.java|nested3Bad|THREAD_SAFETY_VIOLATION","hash":"2210f73a41ea581946a15881105f6ddf","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAEAAAAIAAAABWgsAEA0wD/kQlUL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Mb2Nrcy5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Locks.readOutsideLock1Bad()` reads without synchronization from `this.mField`. Potentially races with write in method `Locks.writeUnderLockOk()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":307,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.readOutsideLock1Bad():boolean","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":307,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":307,"column_number":-1,"description":"access to `this.mField`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":300,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":300,"column_number":-1,"description":"access to `this.mField`"}],"key":"Locks.java|readOutsideLock1Bad|THREAD_SAFETY_VIOLATION","hash":"bc2497fccd90d7d48dc621c90a742af4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAL0AAAAIAAAAQAAAACqgsAEBMwD/kQlUL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Mb2Nrcy5qYXZhoLABASwA/5EJVC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvTG9ja3MuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Locks.readOutsideLock2Bad()` reads without synchronization from `this.mField`. Potentially races with write in method `Locks.writeUnderLockOk()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":311,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.readOutsideLock2Bad():boolean","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":311,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":311,"column_number":-1,"description":"access to `this.mField`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":300,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":300,"column_number":-1,"description":"access to `this.mField`"}],"key":"Locks.java|readOutsideLock2Bad|THREAD_SAFETY_VIOLATION","hash":"374c2b8150f3d4bf0d40647791f108eb","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAL0AAAAIAAAAQAAAACqgsAEBNwD/kQlUL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Mb2Nrcy5qYXZhoLABASwA/5EJVC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvTG9ja3MuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Locks.tryLockNoCheckBad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":92,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.tryLockNoCheckBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":92,"column_number":-1,"description":"access to `this.f`"}],"key":"Locks.java|tryLockNoCheckBad|THREAD_SAFETY_VIOLATION","hash":"c23a74afb857e924d8054c6950b8edf4","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF4AAAAEAAAAIAAAABWgsABcAP+RCVQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0xvY2tzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Locks.tryLockWrongBranchBad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":98,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.tryLockWrongBranchBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":98,"column_number":-1,"description":"access to `this.f`"}],"key":"Locks.java|tryLockWrongBranchBad|THREAD_SAFETY_VIOLATION","hash":"b77637df9ac006dbcd684753490aa190","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF4AAAAEAAAAIAAAABWgsABiAP+RCVQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0xvY2tzLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Locks.unownedReadBad()` reads without synchronization from `this.mField3`. Potentially races with write in method `Locks.unownedLockedWriteOk()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":362,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.unownedReadBad():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":362,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":362,"column_number":-1,"description":"access to `this.mField3`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":358,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":358,"column_number":-1,"description":"call to void Locks.lockedWriteInCallee2()"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":354,"column_number":-1,"description":"access to `this.mField3`"}],"key":"Locks.java|unownedReadBad|THREAD_SAFETY_VIOLATION","hash":"414201aaf1a88ce3611d43d460f287be","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAL0AAAAIAAAAQAAAACqgsAEBagD/kQlUL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Mb2Nrcy5qYXZhoLABAWIA/5EJVC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvTG9ja3MuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `Locks.useLockInCalleeBad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":221,"column":-1,"procedure":"codetoanalyze.java.racerd.Locks.useLockInCalleeBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Locks.java","line_number":221,"column_number":-1,"description":"access to `this.f`"}],"key":"Locks.java|useLockInCalleeBad|THREAD_SAFETY_VIOLATION","hash":"9eef4b0cd02fe4c7eb0b18d80559ff13","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAF8AAAAEAAAAIAAAABWgsAEA3QD/kQlUL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9Mb2Nrcy5qYXZhQA=="}]
