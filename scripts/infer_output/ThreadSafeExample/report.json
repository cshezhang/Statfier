[{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `ThreadSafeExample.FP_lazyInitOk()` reads without synchronization from `this.sStaticField`. Potentially races with write in method `ThreadSafeExample.FP_lazyInitOk()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":121,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeExample.FP_lazyInitOk():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":121,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":121,"column_number":-1,"description":"access to `this.sStaticField`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":118,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":118,"column_number":-1,"description":"access to `this.sStaticField`"}],"key":"ThreadSafeExample.java|FP_lazyInitOk|THREAD_SAFETY_VIOLATION","hash":"49a2eb1be2ecbe02f747dbeae376c3af","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAHIAAAAGAAAAKgAAAB6gsAB5AP+RCWAvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1RocmVhZFNhZmVFeGFtcGxlLmphdmGgsAB2AP8EBEA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeExample.callPublicMethodBad()` indirectly writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":48,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeExample.callPublicMethodBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":48,"column_number":-1,"description":"call to void ThreadSafeExample.assignInPrivateMethodOk()"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":43,"column_number":-1,"description":"access to `this.f`"}],"key":"ThreadSafeExample.java|callPublicMethodBad|THREAD_SAFETY_VIOLATION","hash":"41cd7475296cccdae2ea11ed3af136d7","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGkAAAAEAAAAIwAAABegsGsA/5EJYC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvVGhyZWFkU2FmZUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeExample.callVisibleForTestingBad()` indirectly writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":100,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeExample.callVisibleForTestingBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":100,"column_number":-1,"description":"call to void ThreadSafeExample.visibleForTestingNotPublicOk()"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":95,"column_number":-1,"description":"access to `this.f`"}],"key":"ThreadSafeExample.java|callVisibleForTestingBad|THREAD_SAFETY_VIOLATION","hash":"59ada3a4c5c31afdd0c81034dce6ba9d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGoAAAAEAAAAIwAAABegsABfAP+RCWAvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL1RocmVhZFNhZmVFeGFtcGxlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeExample.deeperTraceBad()` indirectly writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":57,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeExample.deeperTraceBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":57,"column_number":-1,"description":"call to void ThreadSafeExample.callAssignInPrivateMethod()"},{"level":1,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":52,"column_number":-1,"description":"call to void ThreadSafeExample.assignInPrivateMethodOk()"},{"level":2,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":43,"column_number":-1,"description":"access to `this.f`"}],"key":"ThreadSafeExample.java|deeperTraceBad|THREAD_SAFETY_VIOLATION","hash":"d2891dbf4dbc122635fd51468a2b25b1","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGkAAAAEAAAAIwAAABegsGsA/5EJYC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvVGhyZWFkU2FmZUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ExtendsThreadSafeExample.newmethodBad()` writes to field `this.field` outside of synchronization.\n Reporting because a superclass `class codetoanalyze.java.racerd.ThreadSafeExample` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":132,"column":-1,"procedure":"codetoanalyze.java.racerd.ExtendsThreadSafeExample.newmethodBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":132,"column_number":-1,"description":"access to `this.field`"}],"key":"ThreadSafeExample.java|newmethodBad|THREAD_SAFETY_VIOLATION","hash":"34d34c2bba3e7b2138317bf3d545272e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGsAAAAEAAAAIwAAABegsAEAhAD/kQlgL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9UaHJlYWRTYWZlRXhhbXBsZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeExample.recursiveBad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":37,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeExample.recursiveBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":37,"column_number":-1,"description":"access to `this.f`"}],"key":"ThreadSafeExample.java|recursiveBad|THREAD_SAFETY_VIOLATION","hash":"4964f252033d7cdbc1fa3116e320a2b6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGkAAAAEAAAAIwAAABegsGUA/5EJYC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvVGhyZWFkU2FmZUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `YesThreadSafeExtendsNotThreadSafeExample.subsubmethodBad()` writes to field `this.subsubfield` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":159,"column":-1,"procedure":"codetoanalyze.java.racerd.YesThreadSafeExtendsNotThreadSafeExample.subsubmethodBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":159,"column_number":-1,"description":"access to `this.subsubfield`"}],"key":"ThreadSafeExample.java|subsubmethodBad|THREAD_SAFETY_VIOLATION","hash":"9bb6826dabd8c6e8e80736df716881d9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGsAAAAEAAAAIwAAABegsAEAnwD/kQlgL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9UaHJlYWRTYWZlRXhhbXBsZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ThreadSafeExample.tsBad()` writes to field `this.f` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":33,"column":-1,"procedure":"codetoanalyze.java.racerd.ThreadSafeExample.tsBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":33,"column_number":-1,"description":"access to `this.f`"}],"key":"ThreadSafeExample.java|tsBad|THREAD_SAFETY_VIOLATION","hash":"682700f209b6f71f6b500d0ae8f7d880","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGkAAAAEAAAAIwAAABegsGEA/5EJYC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvVGhyZWFkU2FmZUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `ExtendsThreadSafeExample.tsOK()` writes to field `this.field` outside of synchronization.\n Reporting because a superclass `class codetoanalyze.java.racerd.ThreadSafeExample` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":137,"column":-1,"procedure":"codetoanalyze.java.racerd.ExtendsThreadSafeExample.tsOK():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java","line_number":137,"column_number":-1,"description":"access to `this.field`"}],"key":"ThreadSafeExample.java|tsOK|THREAD_SAFETY_VIOLATION","hash":"90452b19f1646d5a3738b5c3d445f70d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAGsAAAAEAAAAIwAAABegsAEAiQD/kQlgL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL3JhY2VyZC9UaHJlYWRTYWZlRXhhbXBsZS5qYXZhQA=="}]
