#0
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java:121: warning: Thread Safety Violation
  Read/Write race. Non-private method `ThreadSafeExample.FP_lazyInitOk()` reads without synchronization from `this.sStaticField`. Potentially races with write in method `ThreadSafeExample.FP_lazyInitOk()`.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  119.         }
  120.       }
  121. >     return sStaticField; // we'll warn here, although this is fine
  122.     }
  123.   }

#1
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java:48: warning: Thread Safety Violation
  Unprotected write. Non-private method `ThreadSafeExample.callPublicMethodBad()` indirectly writes to field `this.f` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  46.     // but should report here, because now it's called
  47.     public void callPublicMethodBad() {
  48. >     assignInPrivateMethodOk();
  49.     }
  50.   

#2
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java:100: warning: Thread Safety Violation
  Unprotected write. Non-private method `ThreadSafeExample.callVisibleForTestingBad()` indirectly writes to field `this.f` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
   98.     // but do complain if a VisibleForTesting method is called from a public method
   99.     public void callVisibleForTestingBad() {
  100. >     visibleForTestingNotPublicOk();
  101.     }
  102.   

#3
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java:57: warning: Thread Safety Violation
  Unprotected write. Non-private method `ThreadSafeExample.deeperTraceBad()` indirectly writes to field `this.f` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  55.     // should report a deeperTraceBade -> callAssignInPrivateMethod -> assignInPrivateMethodOk trace
  56.     public void deeperTraceBad() {
  57. >     callAssignInPrivateMethod();
  58.     }
  59.   

#4
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java:132: warning: Thread Safety Violation
  Unprotected write. Non-private method `ExtendsThreadSafeExample.newmethodBad()` writes to field `this.field` outside of synchronization.
 Reporting because a superclass `class codetoanalyze.java.racerd.ThreadSafeExample` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  130.     @ThreadSafe class, but potentially on other methods in subclass */
  131.     public void newmethodBad() {
  132. >     field = 22;
  133.     }
  134.   

#5
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java:37: warning: Thread Safety Violation
  Unprotected write. Non-private method `ThreadSafeExample.recursiveBad()` writes to field `this.f` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  35.   
  36.     public void recursiveBad() {
  37. >     f = 44;
  38.       recursiveBad();
  39.     }

#6
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java:159: warning: Thread Safety Violation
  Unprotected write. Non-private method `YesThreadSafeExtendsNotThreadSafeExample.subsubmethodBad()` writes to field `this.subsubfield` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  157.     /* We do want to warn on this */
  158.     public void subsubmethodBad() {
  159. >     subsubfield = 22;
  160.     }
  161.   }

#7
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java:33: warning: Thread Safety Violation
  Unprotected write. Non-private method `ThreadSafeExample.tsBad()` writes to field `this.f` outside of synchronization.
 Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  31.   
  32.     public void tsBad() {
  33. >     f = 24;
  34.     }
  35.   

#8
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/ThreadSafeExample.java:137: warning: Thread Safety Violation
  Unprotected write. Non-private method `ExtendsThreadSafeExample.tsOK()` writes to field `this.field` outside of synchronization.
 Reporting because a superclass `class codetoanalyze.java.racerd.ThreadSafeExample` is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).
  135.     /* Bad now that it's overridden */
  136.     public void tsOK() {
  137. >     field = 44;
  138.     }
  139.   }

Found 9 issues
                        Issue Type(ISSUED_TYPE_ID): #
  Thread Safety Violation(THREAD_SAFETY_VIOLATION): 9
