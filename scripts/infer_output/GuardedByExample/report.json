[{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `GuardedByExample.badGuardedByNormalLock()` writes to field `this.guardedbynl` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":526,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.badGuardedByNormalLock():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":526,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":526,"column_number":-1,"description":"access to `this.guardedbynl`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":513,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":513,"column_number":-1,"description":"access to `this.guardedbynl`"}],"key":"GuardedByExample.java|badGuardedByNormalLock|THREAD_SAFETY_VIOLATION","hash":"f8af1f2c1049e9e260790d876db6a21d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAN0AAAAIAAAASAAAAC6gsAECDgD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YaCwAQIBAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `GuardedByExample.badGuardedByReentrantLock()` writes to field `this.guardedbyrel` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":530,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.badGuardedByReentrantLock():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":530,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":530,"column_number":-1,"description":"access to `this.guardedbyrel`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":520,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":520,"column_number":-1,"description":"access to `this.guardedbyrel`"}],"key":"GuardedByExample.java|badGuardedByReentrantLock|THREAD_SAFETY_VIOLATION","hash":"7eb81133e1336231f73d9fd9c3c04552","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAN0AAAAIAAAASAAAAC6gsAECEgD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YaCwAQIIAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `GuardedByExample$Sub.badSub()` writes to field `this.xForSub` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":491,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample$Sub.badSub():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":491,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":491,"column_number":-1,"description":"access to `this.xForSub`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":482,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":482,"column_number":-1,"description":"access to `this.xForSub`"}],"key":"GuardedByExample.java|badSub|THREAD_SAFETY_VIOLATION","hash":"a1801e9b548a7ec44fe5f372a521ff42","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAN0AAAAIAAAASAAAAC6gsAEB6wD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YaCwAQHiAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.byRefTrickyBad()` reads without synchronization from `this.g`. Potentially races with write in method `GuardedByExample.synchronizedMethodWriteOk()`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":281,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.byRefTrickyBad():java.lang.Object","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":281,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":281,"column_number":-1,"description":"access to `this.g`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":122,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":122,"column_number":-1,"description":"access to `this.g`"}],"key":"GuardedByExample.java|byRefTrickyBad|THREAD_SAFETY_VIOLATION","hash":"a9464c9c95de4fb2d80bb18ce782dd57","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANwAAAAIAAAASAAAAC6gsAEBGQD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YaCwAHoA/5EJZC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9iaWFiZHVjdGlvbi9HdWFyZGVkQnlFeGFtcGxlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `GuardedByExample.guardedByTypeSyntaxBad()` writes to field `this.guardedByLock2` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":574,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.guardedByTypeSyntaxBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":574,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":574,"column_number":-1,"description":"access to `this.guardedByLock2`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":562,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":562,"column_number":-1,"description":"access to `this.guardedByLock2`"}],"key":"GuardedByExample.java|guardedByTypeSyntaxBad|THREAD_SAFETY_VIOLATION","hash":"5a7528d8803f552888fdbdda3abb7192","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAN0AAAAIAAAASAAAAC6gsAECPgD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YaCwAQIyAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `GuardedByExample.guardedByTypeSyntaxBad()` writes to field `this.guardedByLock1` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":573,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.guardedByTypeSyntaxBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":573,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":573,"column_number":-1,"description":"access to `this.guardedByLock1`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":561,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":561,"column_number":-1,"description":"access to `this.guardedByLock1`"}],"key":"GuardedByExample.java|guardedByTypeSyntaxBad|THREAD_SAFETY_VIOLATION","hash":"daa35e2514f19d32c1c31428b57c5bf6","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAN0AAAAIAAAASAAAAC6gsAECPQD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YaCwAQIxAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.readFAfterBlockBad()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":98,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.readFAfterBlockBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":98,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":98,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"access to `this.f`"}],"key":"GuardedByExample.java|readFAfterBlockBad|THREAD_SAFETY_VIOLATION","hash":"1d00621180e2b1850d322b6e3535bc3a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANsAAAAIAAAASAAAAC6gsABiAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhoLAAaAD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.readFBad()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":66,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.readFBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":66,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":66,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"access to `this.f`"}],"key":"GuardedByExample.java|readFBad|THREAD_SAFETY_VIOLATION","hash":"ee61bbe6d13ec57ceb5fd0b4a54c1c3a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANsAAAAIAAAASAAAAC6gsABCAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhoLAAaAD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.readFBadButSuppressed()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":71,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.readFBadButSuppressed():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":71,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":71,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"access to `this.f`"}],"key":"GuardedByExample.java|readFBadButSuppressed|THREAD_SAFETY_VIOLATION","hash":"a3bee3267cb5a381222cd8efedc521e3","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANsAAAAIAAAASAAAAC6gsABHAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhoLAAaAD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.readFBadButSuppressedOther()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":76,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.readFBadButSuppressedOther():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":76,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":76,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"access to `this.f`"}],"key":"GuardedByExample.java|readFBadButSuppressedOther|THREAD_SAFETY_VIOLATION","hash":"d01efb3a59f0a1c0520671bfcba36ace","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANsAAAAIAAAASAAAAC6gsABMAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhoLAAaAD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.readFBadWrongAnnotation()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":109,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.readFBadWrongAnnotation():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":109,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":109,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"access to `this.f`"}],"key":"GuardedByExample.java|readFBadWrongAnnotation|THREAD_SAFETY_VIOLATION","hash":"bb263f5cd331de4be2181d8fa88e3fa9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANsAAAAIAAAASAAAAC6gsABtAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhoLAAaAD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.readFBadWrongLock()` reads with synchronization from `this.f`. Potentially races with unsynchronized write in method `GuardedByExample.writeFAfterBlockBad()`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":85,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.readFBadWrongLock():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":85,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":85,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"access to `this.f`"}],"key":"GuardedByExample.java|readFBadWrongLock|THREAD_SAFETY_VIOLATION","hash":"c26b7bbd662f413aeeb3ca87e9ebd2b9","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANsAAAAIAAAASAAAAC6gsABVAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhoLAAaAD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.readFOkMethodAnnotated()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":114,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.readFOkMethodAnnotated():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":114,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":114,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"access to `this.f`"}],"key":"GuardedByExample.java|readFOkMethodAnnotated|THREAD_SAFETY_VIOLATION","hash":"897d502f454e42439ff1156547018830","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANsAAAAIAAAASAAAAC6gsAByAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhoLAAaAD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.readFOkSynchronized()` reads with synchronization from `this.f`. Potentially races with unsynchronized write in method `GuardedByExample.writeFAfterBlockBad()`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":127,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.readFOkSynchronized():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":127,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":127,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"access to `this.f`"}],"key":"GuardedByExample.java|readFOkSynchronized|THREAD_SAFETY_VIOLATION","hash":"28f3c65941b0a8db7a9d48035e40cf5f","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANsAAAAIAAAASAAAAC6gsAB/AP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhoLAAaAD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.readGFromCopyOk()` reads without synchronization from `this.mCopyOfG`. Potentially races with write in method `GuardedByExample.reassignCopyOk()`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":267,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.readGFromCopyOk():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":267,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":267,"column_number":-1,"description":"access to `this.mCopyOfG`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":147,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":147,"column_number":-1,"description":"access to `this.mCopyOfG`"}],"key":"GuardedByExample.java|readGFromCopyOk|THREAD_SAFETY_VIOLATION","hash":"ba4bc1effe7f5aede4f935bc8841d69d","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAN0AAAAIAAAASAAAAC6gsAEBCwD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YaCwAQCTAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `GuardedByExample.reassignCopyOk()` writes to field `this.mCopyOfG` outside of synchronization.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":149,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.reassignCopyOk():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":149,"column_number":-1,"description":"access to `this.mCopyOfG`"}],"key":"GuardedByExample.java|reassignCopyOk|THREAD_SAFETY_VIOLATION","hash":"dddbda96109711b33a1feaaca1af634e","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAG8AAAAEAAAAJAAAABegsAEAlQD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YUA="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.synchronizedMethodReadBad()` reads with synchronization from `this.f`. Potentially races with unsynchronized write in method `GuardedByExample.writeFAfterBlockBad()`.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":138,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.synchronizedMethodReadBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":138,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":138,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"access to `this.f`"}],"key":"GuardedByExample.java|synchronizedMethodReadBad|THREAD_SAFETY_VIOLATION","hash":"5af2bfc632593a3068d0415fee1b7764","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANwAAAAIAAAASAAAAC6gsAEAigD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YaCwAGgA/5EJZC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9iaWFiZHVjdGlvbi9HdWFyZGVkQnlFeGFtcGxlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `GuardedByExample.synchronizedOnThisBad()` reads without synchronization from `biabduction.GuardedByExample.sGuardedByClass`. Potentially races with write in method `GuardedByExample.synchronizeOnClassOk1()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":205,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.synchronizedOnThisBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":205,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":205,"column_number":-1,"description":"access to `biabduction.GuardedByExample.sGuardedByClass`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":200,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":200,"column_number":-1,"description":"access to `biabduction.GuardedByExample.sGuardedByClass`"}],"key":"GuardedByExample.java|synchronizedOnThisBad|THREAD_SAFETY_VIOLATION","hash":"edc9053c6dcec64f414cb559e99de3dd","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAN0AAAAIAAAASAAAAC6gsAEAzQD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YaCwAQDIAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `GuardedByExample.writeFAfterBlockBad()` writes to field `this.f` outside of synchronization.\n Reporting because this access may occur on a background thread.","severity":"WARNING","line":104,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.writeFAfterBlockBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"access to `this.f`"}],"key":"GuardedByExample.java|writeFAfterBlockBad|THREAD_SAFETY_VIOLATION","hash":"9a98dbd2b967d35dee05843a11938d3a","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAG4AAAAEAAAAJAAAABegsABoAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Unprotected write. Non-private method `GuardedByExample.writeFBad()` writes to field `this.f` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":80,"column":-1,"procedure":"codetoanalyze.java.biabduction.GuardedByExample.writeFBad():void","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":80,"column_number":-1,"description":"<Write on unknown thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":80,"column_number":-1,"description":"access to `this.f`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"<Write on background thread>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java","line_number":104,"column_number":-1,"description":"access to `this.f`"}],"key":"GuardedByExample.java|writeFBad|THREAD_SAFETY_VIOLATION","hash":"3ca42282b1774faa7854810e2d851b33","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAANsAAAAIAAAASAAAAC6gsABQAP+RCWQvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvYmlhYmR1Y3Rpb24vR3VhcmRlZEJ5RXhhbXBsZS5qYXZhoLAAaAD/kQlkL2hvbWUvdmFuZ3VhcmQvcHJvamVjdHMvU0FNdXRhdG9yL3NyYy90ZXN0L2phdmEvY29kZXRvYW5hbHl6ZS9qYXZhL2JpYWJkdWN0aW9uL0d1YXJkZWRCeUV4YW1wbGUuamF2YUA="}]
