#0
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:526: warning: Thread Safety Violation
  Unprotected write. Non-private method `GuardedByExample.badGuardedByNormalLock()` writes to field `this.guardedbynl` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  524.   
  525.     void badGuardedByNormalLock() {
  526. >     guardedbynl = 22;
  527.     }
  528.   

#1
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:530: warning: Thread Safety Violation
  Unprotected write. Non-private method `GuardedByExample.badGuardedByReentrantLock()` writes to field `this.guardedbyrel` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  528.   
  529.     void badGuardedByReentrantLock() {
  530. >     guardedbyrel = 44;
  531.     }
  532.   

#2
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:491: warning: Thread Safety Violation
  Unprotected write. Non-private method `GuardedByExample$Sub.badSub()` writes to field `this.xForSub` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  489.   
  490.       void badSub() {
  491. >       xForSub = 22;
  492.       }
  493.     }

#3
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:281: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.byRefTrickyBad()` reads without synchronization from `this.g`. Potentially races with write in method `GuardedByExample.synchronizedMethodWriteOk()`.
 Reporting because this access may occur on a background thread.
  279.         local = g; // we have a local pointer... to pt(G)
  280.       }
  281. >     g.toString(); // ...but unsafe access is through g!
  282.       return local;
  283.     }

#4
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:574: warning: Thread Safety Violation
  Unprotected write. Non-private method `GuardedByExample.guardedByTypeSyntaxBad()` writes to field `this.guardedByLock2` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  572.     void guardedByTypeSyntaxBad() {
  573.       guardedByLock1 = true;
  574. >     guardedByLock2 = true;
  575.     }
  576.   }

#5
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:573: warning: Thread Safety Violation
  Unprotected write. Non-private method `GuardedByExample.guardedByTypeSyntaxBad()` writes to field `this.guardedByLock1` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  571.   
  572.     void guardedByTypeSyntaxBad() {
  573. >     guardedByLock1 = true;
  574.       guardedByLock2 = true;
  575.     }

#6
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:98: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.readFAfterBlockBad()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.
 Reporting because this access may occur on a background thread.
   96.       synchronized (mLock) {
   97.       }
   98. >     this.f.toString();
   99.     }
  100.   

#7
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:66: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.readFBad()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  64.   
  65.     void readFBad() {
  66. >     this.f.toString();
  67.     }
  68.   

#8
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:71: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.readFBadButSuppressed()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  69.     @SuppressLint("InvalidAccessToGuardedField")
  70.     void readFBadButSuppressed() {
  71. >     this.f.toString();
  72.     }
  73.   

#9
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:76: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.readFBadButSuppressedOther()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  74.     @SuppressLint("SomeOtherWarning")
  75.     void readFBadButSuppressedOther() {
  76. >     this.f.toString();
  77.     }
  78.   

#10
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:109: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.readFBadWrongAnnotation()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  107.     @GuardedBy("mOtherLock")
  108.     void readFBadWrongAnnotation() {
  109. >     this.f.toString();
  110.     }
  111.   

#11
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:85: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.readFBadWrongLock()` reads with synchronization from `this.f`. Potentially races with unsynchronized write in method `GuardedByExample.writeFAfterBlockBad()`.
 Reporting because this access may occur on a background thread.
  83.     void readFBadWrongLock() {
  84.       synchronized (mOtherLock) {
  85. >       this.f.toString(); // f is supposed to be protected by mLock
  86.       }
  87.     }

#12
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:114: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.readFOkMethodAnnotated()` reads without synchronization from `this.f`. Potentially races with write in method `GuardedByExample.writeFAfterBlockBad()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  112.     @GuardedBy("mLock")
  113.     void readFOkMethodAnnotated() {
  114. >     this.f.toString();
  115.     }
  116.   

#13
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:127: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.readFOkSynchronized()` reads with synchronization from `this.f`. Potentially races with unsynchronized write in method `GuardedByExample.writeFAfterBlockBad()`.
 Reporting because this access may occur on a background thread.
  125.     void readFOkSynchronized() {
  126.       synchronized (mLock) {
  127. >       this.f.toString();
  128.       }
  129.     }

#14
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:267: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.readGFromCopyOk()` reads without synchronization from `this.mCopyOfG`. Potentially races with write in method `GuardedByExample.reassignCopyOk()`.
 Reporting because this access may occur on a background thread.
  265.         g.toString();
  266.       }
  267. >     mCopyOfG.toString(); // should be an error; unprotected access to pt(g)
  268.     }
  269.   

#15
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:149: warning: Thread Safety Violation
  Unprotected write. Non-private method `GuardedByExample.reassignCopyOk()` writes to field `this.mCopyOfG` outside of synchronization.
 Reporting because this access may occur on a background thread.
  147.         mCopyOfG = g; // these are ok: access of g guarded by this
  148.       }
  149. >     mCopyOfG = new Object(); // ok; this doesn't change the value of g
  150.     }
  151.   

#16
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:138: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.synchronizedMethodReadBad()` reads with synchronization from `this.f`. Potentially races with unsynchronized write in method `GuardedByExample.writeFAfterBlockBad()`.
 Reporting because this access may occur on a background thread.
  136.   
  137.     synchronized void synchronizedMethodReadBad() {
  138. >     this.f.toString(); // f is supposed to be protected by mLock, not this
  139.     }
  140.   

#17
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:205: warning: Thread Safety Violation
  Read/Write race. Non-private method `GuardedByExample.synchronizedOnThisBad()` reads without synchronization from `biabduction.GuardedByExample.sGuardedByClass`. Potentially races with write in method `GuardedByExample.synchronizeOnClassOk1()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  203.   
  204.     void synchronizedOnThisBad() {
  205. >     sGuardedByClass.toString();
  206.     }
  207.   

#18
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:104: warning: Thread Safety Violation
  Unprotected write. Non-private method `GuardedByExample.writeFAfterBlockBad()` writes to field `this.f` outside of synchronization.
 Reporting because this access may occur on a background thread.
  102.       synchronized (mLock) {
  103.       }
  104. >     this.f = new Object();
  105.     }
  106.   

#19
/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/biabduction/GuardedByExample.java:80: warning: Thread Safety Violation
  Unprotected write. Non-private method `GuardedByExample.writeFBad()` writes to field `this.f` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  78.   
  79.     void writeFBad() {
  80. >     this.f = new Object();
  81.     }
  82.   

Found 20 issues
                        Issue Type(ISSUED_TYPE_ID): #
  Thread Safety Violation(THREAD_SAFETY_VIOLATION): 20
