[{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Inference.read4OutsideSyncBad()` reads without synchronization from `this.mField4`. Potentially races with write in method `Inference.readInsideSyncCoincidentally()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":64,"column":-1,"procedure":"codetoanalyze.java.racerd.Inference.read4OutsideSyncBad():int","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":64,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":64,"column_number":-1,"description":"access to `this.mField4`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":58,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":58,"column_number":-1,"description":"access to `this.mField4`"}],"key":"Inference.java|read4OutsideSyncBad|THREAD_SAFETY_VIOLATION","hash":"b060eb0e101e4c6f65f4bf5f0713f283","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAMIAAAAIAAAAQgAAACygsABAAP+RCVgvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0luZmVyZW5jZS5qYXZhoLB6AP+RCVgvaG9tZS92YW5ndWFyZC9wcm9qZWN0cy9TQU11dGF0b3Ivc3JjL3Rlc3QvamF2YS9jb2RldG9hbmFseXplL2phdmEvcmFjZXJkL0luZmVyZW5jZS5qYXZhQA=="},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Inference.unprotectedRead1Bad()` reads without synchronization from `this.mField1`. Potentially races with write in method `Inference.writeUnderLock1Ok()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":21,"column":-1,"procedure":"codetoanalyze.java.racerd.Inference.unprotectedRead1Bad():int","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":21,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":21,"column_number":-1,"description":"access to `this.mField1`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":16,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":16,"column_number":-1,"description":"access to `this.mField1`"}],"key":"Inference.java|unprotectedRead1Bad|THREAD_SAFETY_VIOLATION","hash":"6dae7236899ff0008b1535fd3d8c66f5","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAMEAAAAIAAAAQgAAACygsFUA/5EJWC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvSW5mZXJlbmNlLmphdmGgsFAA/5EJWC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvSW5mZXJlbmNlLmphdmFA"},{"bug_type":"THREAD_SAFETY_VIOLATION","qualifier":"Read/Write race. Non-private method `Inference.unprotectedRead2Bad()` reads without synchronization from `this.mField2`. Potentially races with write in method `Inference.writeUnderLock2Ok()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not.","severity":"WARNING","line":34,"column":-1,"procedure":"codetoanalyze.java.racerd.Inference.unprotectedRead2Bad():int","procedure_start_line":0,"file":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","bug_trace":[{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":34,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":34,"column_number":-1,"description":"access to `this.mField2`"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":29,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"/home/vanguard/projects/SAMutator/src/test/java/codetoanalyze/java/racerd/Inference.java","line_number":29,"column_number":-1,"description":"access to `this.mField2`"}],"key":"Inference.java|unprotectedRead2Bad|THREAD_SAFETY_VIOLATION","hash":"c968b24c7c5acac7b8653e8849d27e3b","bug_type_hum":"Thread Safety Violation","access":"hJWmvgAAAMEAAAAIAAAAQgAAACygsGIA/5EJWC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvSW5mZXJlbmNlLmphdmGgsF0A/5EJWC9ob21lL3Zhbmd1YXJkL3Byb2plY3RzL1NBTXV0YXRvci9zcmMvdGVzdC9qYXZhL2NvZGV0b2FuYWx5emUvamF2YS9yYWNlcmQvSW5mZXJlbmNlLmphdmFA"}]
